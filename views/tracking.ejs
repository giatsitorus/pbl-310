<!DOCTYPE html>
<html lang="en">
<%- include('components/head') %>
<body>
    <!-- <%- include('components/navigation') %> -->
    <div class="container mt-3">
        <div class="hd-tracking-container">
            <div class="hd-icon">
                <img src="./assets/camera-svgrepo-com.svg"/>
                <span>Camera Preview</span>
            </div>
            <video id="video" autoplay muted></video>
            <canvas id="canvas"></canvas>
        </div>
        <div class="hd-detail-wrapper">
          <div class="hd-detail">
            <span>Start Location</span>
            <span>Distance</span>
            <span>Hole Count</span>
          </div>
          <div class="hd-btn-container">
            <button class="hd-btn-detect hd-start" id="startStream">
              <span>Start</span>
              <img src="./assets/play-1003-svgrepo-com.svg" alt="">
            </button>
            <button class="hd-btn-detect hd-stop" id="stopStream">
              <span>Stop</span>
              <img src="./assets/stop-svgrepo-com.svg" alt="">
            </button>
          </div>
        </div>
    </div>
  
    <script>
      const video = document.getElementById('video');
      const canvas = document.getElementById('canvas');
      const btnStartStream = document.getElementById('startStream');
      const btnStopStream = document.getElementById('stopStream');
      const ctx = canvas.getContext('2d');
      let detections = [];
      let stream;
      let animationId;
      let intervalId;
  
      btnStopStream.addEventListener('click', ()=>{
        if (stream) {
          stream.getTracks().forEach(track => track.stop()); 
          video.srcObject = null; 
        }
        
        if (intervalId) {
          clearInterval(intervalId);
          intervalId = null;
        }
        
        if (animationId) {
          cancelAnimationFrame(animationId);
          animationId = null;
        }
        const ctx = canvas.getContext('2d');
        ctx.clearRect(0, 0, canvas.width, canvas.height);
      })
      
      btnStartStream.addEventListener('click', ()=>{
        navigator.mediaDevices.getUserMedia({ video: { facingMode: "environment" } })
        // navigator.mediaDevices.getUserMedia({ video: true })
          .then(s => {
            stream = s;
            video.srcObject = stream;
            video.onloadedmetadata = () => {
              canvas.width = video.videoWidth;
              canvas.height = video.videoHeight;
              intervalId = setInterval(captureAndSend, 500);
              animationId = requestAnimationFrame(drawDetections);
            };
          });
      })
  
      function captureAndSend() {
        const hiddenCanvas = document.createElement('canvas');
        hiddenCanvas.width = video.videoWidth;
        hiddenCanvas.height = video.videoHeight;
        const hiddenCtx = hiddenCanvas.getContext('2d');
        hiddenCtx.drawImage(video, 0, 0);
  
        const imageData = hiddenCanvas.toDataURL('image/jpeg');
  
        fetch('https://pbl-310.duckdns.org/detect', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ image: imageData })
        })
        .then(res => res.json())
        .then(data => {
          detections = data;
        })
        .catch(err => console.error('Detection error:', err));
      }
  
      function drawDetections() {
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
        detections.forEach(d => {
          const [x1, y1, x2, y2] = d.bbox;
          ctx.strokeStyle = "lime";
          ctx.lineWidth = 2;
          ctx.strokeRect(x1, y1, x2 - x1, y2 - y1);
          ctx.fillStyle = "lime";
          ctx.font = "13px Arial";
          ctx.fillText(d.class, x1 + 4, y1 + 16);
        });
        requestAnimationFrame(drawDetections);
      }
    </script>
  </body>
</html>